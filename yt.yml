trigger:
  branches:
    include:
      - main

variables:
  # Azure App Service Names
  frontendAppName: "youtube-clone-frontend"
  backendAppName: "youtube-clone-backend"

  # Azure Resource Group
  resourceGroup: "Raj"

  # Node and .NET versions
  nodeVersion: '22.17.0'
  dotnetVersion: '8.0.412'

stages:

# 1️⃣ Build Frontend
- stage: Build_Frontend
  displayName: Build Frontend
  jobs:
    - job: BuildReactApp
      pool:
        name: 'Myagent'
      steps:
        - checkout: self

        # ✅ Debug repo contents
        - powershell: |
            Write-Host "=== Repo root contents ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse
          displayName: 'Debug: Show Repo Root Contents'

        # ✅ Debug frontend folder before build
        - powershell: |
            Write-Host "=== Frontend folder BEFORE build ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\frontend" -Recurse
          displayName: 'Debug: Verify Frontend Folder Before Build'

        # ✅ Setup Node
        - task: NodeTool@0
          inputs:
            versionSpec: $(nodeVersion)
          displayName: 'Use Node.js $(nodeVersion)'

        # ✅ Install and Build
        - script: |
            set -e
            npm install
            npm run build
          workingDirectory: '$(Build.SourcesDirectory)/frontend'
          displayName: 'Install and Build Frontend'

        # ✅ Debug frontend after build
        - powershell: |
            Write-Host "=== Frontend folder AFTER build ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\frontend" -Recurse
            Write-Host "=== Build folder (should exist) ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\frontend\build" -Recurse
          displayName: 'Debug: Show Frontend Build Folder'
          continueOnError: true

        # ✅ Publish frontend build
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.SourcesDirectory)/frontend/build'
            artifactName: 'frontend'
          displayName: 'Publish Frontend Build Artifact'

# 2️⃣ Build Backend
- stage: Build_Backend
  displayName: Build Backend
  jobs:
    - job: BuildBackend
      pool:
        name: 'Myagent'
      steps:
        - checkout: self

        # ✅ Debug backend folder before build
        - powershell: |
            Write-Host "=== Backend folder BEFORE build ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\backend" -Recurse
          displayName: 'Debug: Verify Backend Folder Before Build'

        # ✅ Setup .NET
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: $(dotnetVersion)
          displayName: 'Use .NET $(dotnetVersion)'

        # ✅ Restore, Build, Publish
        - script: |
            set -e
            dotnet restore
            dotnet build --configuration Release
            dotnet publish -c Release -o publish
          workingDirectory: '$(Build.SourcesDirectory)/backend/MyApiProject'
          displayName: 'Build and Publish Backend'

        # ✅ Debug backend after publish
        - powershell: |
            Write-Host "=== Backend folder AFTER publish ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\backend" -Recurse
            Write-Host "=== Publish folder (should exist) ==="
            Get-ChildItem -Path "$(Build.SourcesDirectory)\backend\publish" -Recurse
          displayName: 'Debug: Show Backend Publish Folder'
          continueOnError: true

        # ✅ Publish backend build
        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: '$(Build.SourcesDirectory)/backend/publish'
            artifactName: 'backend'
          displayName: 'Publish Backend Build Artifact'

# 3️⃣ Deploy Frontend
- stage: Deploy_Frontend
  displayName: Deploy Frontend
  dependsOn: Build_Frontend
  jobs:
    - deployment: DeployReactApp
      environment: 'production'
      pool:
        name: 'Myagent'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: frontend
                displayName: 'Download Frontend Artifact'

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'AzureRM-devop'
                  appName: $(frontendAppName)
                  package: '$(Pipeline.Workspace)/frontend'
                displayName: 'Deploy Frontend to Azure App Service'

# 4️⃣ Deploy Backend
- stage: Deploy_Backend
  displayName: Deploy Backend
  dependsOn: Build_Backend
  jobs:
    - deployment: DeployApi
      environment: 'production'
      pool:
        name: 'Myagent'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: backend
                displayName: 'Download Backend Artifact'

              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'AzureRM-devop'
                  appName: $(backendAppName)
                  package: '$(Pipeline.Workspace)/backend'
                displayName: 'Deploy Backend to Azure App Service'
